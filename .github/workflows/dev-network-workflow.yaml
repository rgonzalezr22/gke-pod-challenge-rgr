# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#werever
#

name: "Application Apply Network"

on:
  push:
    branches:
      - main
    paths:
      - network/**
      - .github/workflows/dev-network-workflow.yaml
      - vars/**/network.tfvars

env:
  SERVICE_ACCOUNT: gkergr-dev-iac-sa@sandbox-rgr.iam.gserviceaccount.com
  SERVICE_ACCOUNT_IMPERSONATE: gkergr-dev-github-impersonate@sandbox-rgr.iam.gserviceaccount.com
  WIF_PROVIDER: projects/560162783335/locations/global/workloadIdentityPools/gkergr-dev-iwip/providers/gkergr-iac-github-fip
  BACKEND_BUCKET: gkergr-dev-iac-core-tf
  OUTPUTS_BUCKET: gkergr-dev-iac-core-outputs
  ENV: dev
  CURRENT_STAGE: network
  TF_VERSION: 1.3.1

jobs:
  terraform-pr:
    permissions:
      contents: read
      id-token: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Checkout repository
        uses: actions/checkout@v3
      # set up authentication via Workload identity Federation
      - id: gcp-auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT_IMPERSONATE }}
          access_token_lifetime: 3600s

      - id: gcp-sdk
        name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          install_components: alpha
      
      # copy provider and tfvars files
      - id: tf-config
        name: Copy Terraform output files
        working-directory: ${{ env.CURRENT_STAGE }}
        run: |
          gcloud alpha storage cp "gs://${{env.OUTPUTS_BUCKET}}/templates/backend.tf" .
          gcloud alpha storage cp -r "gs://${{env.OUTPUTS_BUCKET}}/tfvars" .
          cp tfvars/* .

      - id: tf-setup
        name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # run Terraform init/validate/plan
      - id: tf-init
        name: Terraform init
        working-directory: ${{ env.CURRENT_STAGE }}
        run: |
          terraform init -backend-config=prefix=${{ env.CURRENT_STAGE }}/terraform.tfstate -no-color
          
      - id: tf-validate
        name: Terraform validate
        run: terraform validate -no-color

      - id: tf-plan
        name: Terraform plan
        working-directory: ${{ env.CURRENT_STAGE }}
        continue-on-error: true
        run: |
          terraform plan -input=false -var-file=../vars/${{ env.ENV }}/${{ env.CURRENT_STAGE }}.tfvars -out tfplan -no-color
      
      - id: tf-apply
        #if: github.event.pull_request.merged == true
        name: Terraform apply
        working-directory: ${{ env.CURRENT_STAGE }}
        continue-on-error: true
        run: |
          terraform apply -input=false -auto-approve -no-color tfplan
      
      - id: pr-comment
        name: Post comment to Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: terraform\n${{ steps.tf-plan.outputs.stdout }}
        with:
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.tf-init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.tf-validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.tf-validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan üìñ\`${{ steps.tf-plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            #### Terraform Apply üìñ\`${{ steps.tf-apply.outcome }}\`
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      # jq -j -r '.resource_changes[] | (.change.actions | join(",")), " ", .address, "\n" ' foo.json